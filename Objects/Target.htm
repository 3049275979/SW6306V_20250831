<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Target.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Target.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Sat Sep  6 14:28:02 2025
<BR><P>
<H3>Maximum Stack Usage =        488 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Home1_2 &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC_COMP_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel2_3_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[27]">Ds3231SetHome</a> from main.o(.text.Ds3231SetHome) referenced 7 times from main.o(.rodata.table)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from py32f0xx_bsp_exti.o(.text.EXTI0_1_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from py32f0xx_bsp_exti.o(.text.EXTI2_3_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from py32f0xx_bsp_exti.o(.text.EXTI4_15_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[28]">ElectricArc</a> from main.o(.text.ElectricArc) referenced from main.o(.rodata.table)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from py32f0xx_it.o(.text.HardFault_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[23]">Home1</a> from main.o(.text.Home1) referenced from main.o(.rodata.table)
 <LI><a href="#[25]">Home1_2</a> from main.o(.text.Home1_2) referenced 9 times from main.o(.rodata.table)
 <LI><a href="#[24]">Home2</a> from main.o(.text.Home2) referenced from main.o(.rodata.table)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from py32f0xx_bsp_i2c.o(.text.I2C1_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1d]">LED_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[14]">LPTIM1_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[2d]">MCU1INTIbusRatioSet</a> from main.o(.text.MCU1INTIbusRatioSet) referenced from main.o(.rodata.table)
 <LI><a href="#[2b]">MCU1LCDbacSet</a> from main.o(.text.MCU1LCDbacSet) referenced from main.o(.rodata.table)
 <LI><a href="#[26]">MCU1LEDSet</a> from main.o(.text.MCU1LEDSet) referenced from main.o(.rodata.table)
 <LI><a href="#[2c]">MCU1Sw6306InputPowerSet</a> from main.o(.text.MCU1Sw6306InputPowerSet) referenced from main.o(.rodata.table)
 <LI><a href="#[2a]">Mcu1SaveSet</a> from main.o(.text.Mcu1SaveSet) referenced from main.o(.rodata.table)
 <LI><a href="#[1]">NMI_Handler</a> from py32f0xx_it.o(.text.NMI_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from py32f0xx_it.o(.text.PendSV_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from py32f0xx_it.o(.text.SVC_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[29]">SetTempControl</a> from main.o(.text.SetTempControl) referenced from main.o(.rodata.table)
 <LI><a href="#[5]">SysTick_Handler</a> from py32f0xx_it.o(.text.SysTick_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_py32f0xx.o(.text.SystemInit) referenced from startup_py32f030xx.o(.text)
 <LI><a href="#[15]">TIM14_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from py32f0xx_bsp_usart.o(.text.USART1_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_py32f030xx.o(.text)
 <LI><a href="#[22]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[22]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[21]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1e]">main</a> from system_py32f0xx.o(.text.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(.text)
</UL>
<P><STRONG><a name="[1b0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1b2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1b3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1b4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1b5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LED_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextSet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1_2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_setTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_setDate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigSpeed
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowFont24
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1_2
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1_2
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[14a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3_Read_Result
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3_Read_Result
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3_Read_Result
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1INTIbusRatioSet
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadPresentGuageCap
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadMaxGuageCap
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppInit
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_fcmplt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmplt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppInit
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3_Read_Result
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1INTIbusRatioSet
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadPresentGuageCap
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadMaxGuageCap
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTempControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1INTIbusRatioSet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1_2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadPresentGuageCap
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadMaxGuageCap
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ba]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1bb]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[34]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[3d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1a7]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1bd]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ad]"></a>__ARM_fcmp4</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fcmp4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
</UL>

<P><STRONG><a name="[1bf]"></a>_fcmp4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fcmp4.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1c0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_py32f0xx.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; $Super$$main &rArr; thread_app &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[51]"></a>APP_I2C_Receive</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, py32f0xx_bsp_i2c.o(.text.APP_I2C_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = APP_I2C_Receive &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_TransmitData8
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ReceiveData8
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_SB
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_RXNE
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BUSY
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BTF
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_ADDR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStopCondition
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableBitPOS
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableBitPOS
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_ADDR
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3_Read_Result
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DS3231_ByteRead
</UL>

<P><STRONG><a name="[5f]"></a>APP_I2C_Transmit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, py32f0xx_bsp_i2c.o(.text.APP_I2C_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = APP_I2C_Transmit &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_TransmitData8
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_SB
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BUSY
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BTF
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_ADDR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStopCondition
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableBitPOS
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3_Read_Result
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3Wakeup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3Hibernate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DS3231_ByteWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DS3231_ByteRead
</UL>

<P><STRONG><a name="[61]"></a>ASYNC_I2C_Receive</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, py32f0xx_bsp_i2c.o(.text.ASYNC_I2C_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASYNC_I2C_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BUSY
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_TX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableBitPOS
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_CapacityLoad
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCRead
</UL>

<P><STRONG><a name="[63]"></a>ASYNC_I2C_Transmit</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, py32f0xx_bsp_i2c.o(.text.ASYNC_I2C_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BUSY
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_TX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableBitPOS
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
</UL>

<P><STRONG><a name="[64]"></a>BSP_AdcConfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, py32f0xx_bsp_gpio.o(.text.BSP_AdcConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_AdcConfig &rArr; LL_ADC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetSamplingTimeCommonChannels
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetResolution
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetLowPowerMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetDataAlignment
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetClock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Reset
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetTriggerSource
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerDiscont
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetOverrun
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetDMATransfer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetContinuousMode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[74]"></a>BSP_AdcConvert</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, py32f0xx_bsp_gpio.o(.text.BSP_AdcConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_AdcConvert
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerChannels
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_ReadConversionData12
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_EOC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[7b]"></a>BSP_EXTI_Config</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, py32f0xx_bsp_exti.o(.text.BSP_EXTI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_EXTI_Config &rArr; LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[80]"></a>BSP_GPIO_Config</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, py32f0xx_bsp_gpio.o(.text.BSP_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_GPIO_Config &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[83]"></a>BSP_I2C_Config</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, py32f0xx_bsp_i2c.o(.text.BSP_I2C_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_I2C_Config &rArr; I2C_Unlock &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableReset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_ERR
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableReset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_EVT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_BUF
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Diagnosis
</UL>

<P><STRONG><a name="[90]"></a>BSP_PWMChannelConfig</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, py32f0xx_bsp_tim.o(.text.BSP_PWMChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_PWMChannelConfig &rArr; LL_TIM_OC_Init &rArr; OC3Config
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableAllOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[94]"></a>BSP_PWR_Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f0xx_bsp_pwr.o(.text.BSP_PWR_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PWR_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetRegulVoltageScaling
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableLowPowerRunMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableSleep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_DisableSleepOnExit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_DisableEventOnPend
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[9a]"></a>BSP_SystemClockConfig</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, py32f0xx_bsp_rcc.o(.text.BSP_SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSP_SystemClockConfig &rArr; LL_APB1_GRP2_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetLatency
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_EnableIT
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_Disable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_Disable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibFreq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[ab]"></a>BSP_TIM_config</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, py32f0xx_bsp_tim.o(.text.BSP_TIM_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_TIM_config &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableAllOutputs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[ae]"></a>BSP_USART_Config</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, py32f0xx_bsp_usart.o(.text.BSP_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_USART_Config &rArr; LL_USART_SetBaudRate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTransferDirection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetParity
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetHWFlowCtrl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetDataWidth
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RXNE
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_PE
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_ERROR
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_TC
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[c2]"></a>Check_Key_Events</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, debounce_key.o(.text.Check_Key_Events))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Key_Events
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IsShortPressed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IsLongReleased
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IsLongPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[c6]"></a>DS3231_getdate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ds3231_drv.o(.text.DS3231_getdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DS3231_getdate &rArr; IIC_DS3231_ByteRead &rArr; APP_I2C_Receive &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdToDec
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DS3231_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[c9]"></a>DS3231_gettime</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ds3231_drv.o(.text.DS3231_gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DS3231_gettime &rArr; IIC_DS3231_ByteRead &rArr; APP_I2C_Receive &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdToDec
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DS3231_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[ca]"></a>DS3231_setDate</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ds3231_drv.o(.text.DS3231_setDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DS3231_setDate &rArr; IIC_DS3231_ByteWrite &rArr; APP_I2C_Transmit &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DS3231_ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[cd]"></a>DS3231_setTime</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ds3231_drv.o(.text.DS3231_setTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DS3231_setTime &rArr; IIC_DS3231_ByteWrite &rArr; APP_I2C_Transmit &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DS3231_ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[27]"></a>Ds3231SetHome</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, main.o(.text.Ds3231SetHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Ds3231SetHome &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, py32f0xx_bsp_exti.o(.text.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, py32f0xx_bsp_exti.o(.text.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, py32f0xx_bsp_exti.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ElectricArc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(.text.ElectricArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ElectricArc &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[139]"></a>FLASH_BufferRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_drv.o(.text.FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppInit
</UL>

<P><STRONG><a name="[d4]"></a>FlashProgramTest</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, flash_drv.o(.text.FlashProgramTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FlashProgramTest &rArr; HAL_FLASH_Program &rArr; FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[da]"></a>GUI_ShowChar</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, 12864oled_drv.o(.text.GUI_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_ShowChar &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>

<P><STRONG><a name="[dc]"></a>GUI_ShowFont16</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, 12864oled_drv.o(.text.GUI_ShowFont16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>

<P><STRONG><a name="[dd]"></a>GUI_ShowFont24</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, 12864oled_drv.o(.text.GUI_ShowFont24))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GUI_ShowFont24 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>

<P><STRONG><a name="[df]"></a>GUI_ShowFont32</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, 12864oled_drv.o(.text.GUI_ShowFont32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_ShowFont32 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>

<P><STRONG><a name="[101]"></a>GetShtc3Data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, shtc3_drv.o(.text.GetShtc3Data))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
</UL>

<P><STRONG><a name="[d6]"></a>HAL_FLASH_Erase</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, py32f0xx_hal_flash.o(.text.HAL_FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramTest
</UL>

<P><STRONG><a name="[d8]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramTest
</UL>

<P><STRONG><a name="[d9]"></a>HAL_FLASH_Program</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, py32f0xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramTest
</UL>

<P><STRONG><a name="[d5]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramTest
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Home1</STRONG> (Thumb, 1588 bytes, Stack size 40 bytes, main.o(.text.Home1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Home1 &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBUS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBAT
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTNTC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadIBUS
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadIBAT
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadCapacity
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatVOOC4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatVOOC1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatUFCS
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatSVOOC
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatSFCP
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatSCP
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatQC3P
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatQC3
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatQC2
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPE20
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPE11
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPDPPS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPDFIX
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatNONE
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatFCP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatAFC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[25]"></a>Home1_2</STRONG> (Thumb, 520 bytes, Stack size 376 bytes, main.o(.text.Home1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Home1_2 &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[24]"></a>Home2</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, main.o(.text.Home2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Home2 &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortC2ON
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortC1ON
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortA2ON
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortA1ON
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtc3Data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 592 bytes, Stack size 8 bytes, py32f0xx_bsp_i2c.o(.text.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2C1_IRQHandler &rArr; I2C_Diagnosis &rArr; BSP_I2C_Config &rArr; I2C_Unlock &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Diagnosis
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_TransmitData8
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ReceiveData8
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_SB
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_RXNE
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BTF
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BERR
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_AF
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_ADDR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStopCondition
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_RX
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_TX
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_RX
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_EVT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_BUF
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_BERR
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_AF
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_ADDR
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>I2C_Diagnosis</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f0xx_bsp_i2c.o(.text.I2C_Diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_Diagnosis &rArr; BSP_I2C_Config &rArr; I2C_Unlock &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableReset
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>I2C_Unlock</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, py32f0xx_bsp_i2c.o(.text.I2C_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Unlock &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[c7]"></a>IIC_DS3231_ByteRead</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ds3231_drv.o(.text.IIC_DS3231_ByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC_DS3231_ByteRead &rArr; APP_I2C_Receive &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_gettime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_getdate
</UL>

<P><STRONG><a name="[cc]"></a>IIC_DS3231_ByteWrite</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds3231_drv.o(.text.IIC_DS3231_ByteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_DS3231_ByteWrite &rArr; APP_I2C_Transmit &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_setTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_setDate
</UL>

<P><STRONG><a name="[181]"></a>Key_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, debounce_key.o(.text.Key_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c4]"></a>Key_IsLongPressed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, debounce_key.o(.text.Key_IsLongPressed))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Key_Events
</UL>

<P><STRONG><a name="[c5]"></a>Key_IsLongReleased</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, debounce_key.o(.text.Key_IsLongReleased))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Key_Events
</UL>

<P><STRONG><a name="[c3]"></a>Key_IsShortPressed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, debounce_key.o(.text.Key_IsShortPressed))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Key_Events
</UL>

<P><STRONG><a name="[111]"></a>Key_Read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debounce_key.o(.text.Key_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[113]"></a>Key_Scan</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, debounce_key.o(.text.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Scan &rArr; Key_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[7c]"></a>LL_EXTI_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableRisingTrig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableFallingTrig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>

<P><STRONG><a name="[81]"></a>LL_GPIO_Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySpiGpioInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdGpioDisable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMChannelConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
</UL>

<P><STRONG><a name="[8a]"></a>LL_I2C_Init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetOwnAddress1
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Enable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigSpeed
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[126]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[a7]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[ad]"></a>LL_TIM_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetRepetitionCounter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
</UL>

<P><STRONG><a name="[91]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_TIM_OC_Init &rArr; OC3Config
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMChannelConfig
</UL>

<P><STRONG><a name="[149]"></a>LL_mDelay</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, py32f0xx_ll_utils.o(.text.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[135]"></a>LcdGpioDisable</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, 12864oled_drv.o(.text.LcdGpioDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LcdGpioDisable &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2d]"></a>MCU1INTIbusRatioSet</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, main.o(.text.MCU1INTIbusRatioSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCU1INTIbusRatioSet &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBAT
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadIBUS
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsCharging
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[2b]"></a>MCU1LCDbacSet</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, main.o(.text.MCU1LCDbacSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCU1LCDbacSet &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[26]"></a>MCU1LEDSet</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, main.o(.text.MCU1LEDSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCU1LEDSet &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[2c]"></a>MCU1Sw6306InputPowerSet</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, main.o(.text.MCU1Sw6306InputPowerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCU1Sw6306InputPowerSet &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[2a]"></a>Mcu1SaveSet</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, main.o(.text.Mcu1SaveSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Mcu1SaveSet &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[138]"></a>Menu_AppInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, main.o(.text.Menu_AppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Menu_AppInit &rArr; FLASH_BufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSw6306VInputPowMax
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSw6306VInIbusRatio
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[180]"></a>MySPI_SwapByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, myspi_drv.o(.text.MySPI_SwapByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MySPI_SwapByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[13e]"></a>MySpiGpioInit</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, myspi_drv.o(.text.MySpiGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MySpiGpioInit &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>OLED_Clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 12864oled_drv.o(.text.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcdprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[145]"></a>OLED_Display</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, 12864oled_drv.o(.text.OLED_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Display &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; MySPI_SwapByte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcdprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[147]"></a>OLED_Display_On</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, 12864oled_drv.o(.text.OLED_Display_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Display_On &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; MySPI_SwapByte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[148]"></a>OLED_Init</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, 12864oled_drv.o(.text.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Init &rArr; OLED_Display &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; MySPI_SwapByte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[cf]"></a>OLED_Print</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, 12864oled_drv.o(.text.OLED_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowFont32
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowFont24
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowFont16
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTempControl
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu1SaveSet
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1Sw6306InputPowerSet
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1LEDSet
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1LCDbacSet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1INTIbusRatioSet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1_2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElectricArc
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ds3231SetHome
</UL>

<P><STRONG><a name="[db]"></a>OLED_Set_Pixel</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, 12864oled_drv.o(.text.OLED_Set_Pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Set_Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowFont32
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowFont24
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowFont16
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowChar
</UL>

<P><STRONG><a name="[146]"></a>OLED_WR_Byte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 12864oled_drv.o(.text.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_WR_Byte &rArr; Write_IIC_Data &rArr; MySPI_SwapByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[12c]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[12a]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetHSIDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[151]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[154]"></a>SW6306_ADCLoad</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_ADCLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SW6306_ADCLoad &rArr; SW6306_ADCRead &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBUS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBAT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCRead
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[156]"></a>SW6306_ADCRead</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sw6306.o(.text.SW6306_ADCRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_ADCRead &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
</UL>

<P><STRONG><a name="[159]"></a>SW6306_ByteModify</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sw6306.o(.text.SW6306_ByteModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_ByteModify &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_LPSet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextEnSet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextDirSet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PDSet
</UL>

<P><STRONG><a name="[15a]"></a>SW6306_ByteRead</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_ByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SW6306_ByteRead &rArr; ASYNC_I2C_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_StatusLoad
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PowerLoad
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortStatusLoad
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_CapacityLoad
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>

<P><STRONG><a name="[158]"></a>SW6306_ByteWrite</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sw6306.o(.text.SW6306_ByteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_trig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Unlock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortA2Remove
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortA1Remove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Click
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PDSet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCRead
</UL>

<P><STRONG><a name="[15b]"></a>SW6306_CapacityLoad</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_CapacityLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SW6306_CapacityLoad &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[15c]"></a>SW6306_Click</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_Click))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SW6306_Click &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_trig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[15d]"></a>SW6306_IextDirSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_IextDirSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SW6306_IextDirSet &rArr; SW6306_ByteModify &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[15e]"></a>SW6306_IextEnSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_IextEnSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SW6306_IextEnSet &rArr; SW6306_ByteModify &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[15f]"></a>SW6306_IextSet</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_IextSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SW6306_IextSet &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[160]"></a>SW6306_Init</STRONG> (Thumb, 944 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SW6306_Init &rArr; SW6306_PDSet &rArr; SW6306_ByteModify &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PDSet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[19d]"></a>SW6306_IsBatteryDepleted</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsBatteryDepleted))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[137]"></a>SW6306_IsCharging</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsCharging))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1INTIbusRatioSet
</UL>

<P><STRONG><a name="[193]"></a>SW6306_IsDischarging</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsDischarging))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[191]"></a>SW6306_IsErrorinCharging</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsErrorinCharging))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[192]"></a>SW6306_IsErrorinDischarging</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsErrorinDischarging))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[194]"></a>SW6306_IsFullCharged</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsFullCharged))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[190]"></a>SW6306_IsInitialized</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[19e]"></a>SW6306_IsOverHeated</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsOverHeated))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[104]"></a>SW6306_IsPortA1ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsPortA1ON))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
</UL>

<P><STRONG><a name="[105]"></a>SW6306_IsPortA2ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsPortA2ON))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
</UL>

<P><STRONG><a name="[102]"></a>SW6306_IsPortC1ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsPortC1ON))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
</UL>

<P><STRONG><a name="[103]"></a>SW6306_IsPortC2ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsPortC2ON))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
</UL>

<P><STRONG><a name="[ed]"></a>SW6306_IsQCStatAFC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatAFC))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f7]"></a>SW6306_IsQCStatFCP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatFCP))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[fb]"></a>SW6306_IsQCStatNONE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatNONE))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f5]"></a>SW6306_IsQCStatPDFIX</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatPDFIX))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f4]"></a>SW6306_IsQCStatPDPPS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatPDPPS))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f3]"></a>SW6306_IsQCStatPE11</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatPE11))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f2]"></a>SW6306_IsQCStatPE20</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatPE20))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[198]"></a>SW6306_IsQCStatPQC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatPQC))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[fa]"></a>SW6306_IsQCStatQC2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatQC2))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f9]"></a>SW6306_IsQCStatQC3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatQC3))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f8]"></a>SW6306_IsQCStatQC3P</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatQC3P))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f6]"></a>SW6306_IsQCStatSCP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatSCP))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[ee]"></a>SW6306_IsQCStatSFCP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatSFCP))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[ef]"></a>SW6306_IsQCStatSVOOC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatSVOOC))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[ea]"></a>SW6306_IsQCStatUFCS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatUFCS))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f1]"></a>SW6306_IsQCStatVOOC1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatVOOC1))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[f0]"></a>SW6306_IsQCStatVOOC4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatVOOC4))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[197]"></a>SW6306_IsQCStatVQC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsQCStatVQC))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[163]"></a>SW6306_LPSet</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_LPSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SW6306_LPSet &rArr; SW6306_ByteModify &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[162]"></a>SW6306_PDSet</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_PDSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SW6306_PDSet &rArr; SW6306_ByteModify &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
</UL>

<P><STRONG><a name="[164]"></a>SW6306_PortA1Remove</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_PortA1Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_PortA1Remove &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[165]"></a>SW6306_PortA2Remove</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_PortA2Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_PortA2Remove &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[166]"></a>SW6306_PortStatusLoad</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_PortStatusLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_PortStatusLoad &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[167]"></a>SW6306_PowerLoad</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_PowerLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_PowerLoad &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[ec]"></a>SW6306_ReadCapacity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[e6]"></a>SW6306_ReadIBAT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadIBAT))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[e9]"></a>SW6306_ReadIBUS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadIBUS))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1INTIbusRatioSet
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[168]"></a>SW6306_ReadMaxGuageCap</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_ReadMaxGuageCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SW6306_ReadMaxGuageCap &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[196]"></a>SW6306_ReadMaxInputPower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadMaxInputPower))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[195]"></a>SW6306_ReadMaxOutputPower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadMaxOutputPower))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[169]"></a>SW6306_ReadPresentGuageCap</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_ReadPresentGuageCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SW6306_ReadPresentGuageCap &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[fc]"></a>SW6306_ReadTCHIP</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_ReadTCHIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SW6306_ReadTCHIP &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[fd]"></a>SW6306_ReadTNTC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadTNTC))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[e5]"></a>SW6306_ReadVBAT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadVBAT))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1INTIbusRatioSet
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[e8]"></a>SW6306_ReadVBUS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadVBUS))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
</UL>

<P><STRONG><a name="[155]"></a>SW6306_RegsetSwitch</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_RegsetSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Unlock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_StatusLoad
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PowerLoad
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortStatusLoad
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortA2Remove
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortA1Remove
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_LPSet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextSet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextEnSet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextDirSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Click
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_CapacityLoad
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PDSet
</UL>

<P><STRONG><a name="[16a]"></a>SW6306_StatusLoad</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_StatusLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_StatusLoad &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_trig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[161]"></a>SW6306_Unlock</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_Unlock &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[13d]"></a>SetSw6306VInIbusRatio</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SetSw6306VInIbusRatio))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppInit
</UL>

<P><STRONG><a name="[13c]"></a>SetSw6306VInputPowMax</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SetSw6306VInputPowMax))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppInit
</UL>

<P><STRONG><a name="[29]"></a>SetTempControl</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text.SetTempControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetTempControl &rArr; OLED_Print &rArr; GUI_ShowFont16 &rArr; OLED_Set_Pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.table)
</UL>
<P><STRONG><a name="[16b]"></a>Shtc3Hibernate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, shtc3_drv.o(.text.Shtc3Hibernate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Shtc3Hibernate &rArr; APP_I2C_Transmit &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[16c]"></a>Shtc3Wakeup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, shtc3_drv.o(.text.Shtc3Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Shtc3Wakeup &rArr; APP_I2C_Transmit &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[16d]"></a>Shtc3_Read_Result</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, shtc3_drv.o(.text.Shtc3_Read_Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Shtc3_Read_Result &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[16e]"></a>SysInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_py32f030x6.o(.text.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysInit &rArr; BSP_I2C_Config &rArr; I2C_Unlock &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMChannelConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_py32f0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, py32f0xx_bsp_usart.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART1_IRQHandler &rArr; LL_USART_ClearFlag_PE
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ReceiveData8
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TXE
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_PE
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_NE
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_FE
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TXE
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_PE
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_ORE
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_NE
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_FE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>USART_IsBusy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, py32f0xx_bsp_usart.o(.text.USART_IsBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TXE
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[19c]"></a>USART_bufread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, py32f0xx_bsp_usart.o(.text.USART_bufread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_bufread
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_echo
</UL>

<P><STRONG><a name="[17e]"></a>USART_bufsend</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, py32f0xx_bsp_usart.o(.text.USART_bufsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TXE
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_echo
</UL>

<P><STRONG><a name="[19b]"></a>USART_getvalidnum</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.USART_getvalidnum))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_echo
</UL>

<P><STRONG><a name="[14c]"></a>Write_IIC_Command</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, 12864oled_drv.o(.text.Write_IIC_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_IIC_Command &rArr; MySPI_SwapByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[14b]"></a>Write_IIC_Data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, 12864oled_drv.o(.text.Write_IIC_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_IIC_Data &rArr; MySPI_SwapByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[c8]"></a>bcdToDec</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds3231_drv.o(.text.bcdToDec))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_gettime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_getdate
</UL>

<P><STRONG><a name="[4c]"></a>$Super$$main</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = $Super$$main &rArr; thread_app &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_trig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcdprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_echo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IsBusy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3Wakeup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3Hibernate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Unlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_LPSet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySpiGpioInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdGpioDisable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_EnableIT
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_DisableIT
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableSleep
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableDeepSleep
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>thread_app</STRONG> (Thumb, 2520 bytes, Stack size 48 bytes, main.o(.text.thread_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = thread_app &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtc3_Read_Result
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSw6306VInputPowMax
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_StatusLoad
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBUS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBAT
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTNTC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadPresentGuageCap
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadMaxOutputPower
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadMaxInputPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadMaxGuageCap
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadIBUS
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadIBAT
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadCapacity
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PowerLoad
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortStatusLoad
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortA2Remove
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortA1Remove
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatVQC
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatVOOC4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatVOOC1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatUFCS
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatSVOOC
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatSFCP
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatSCP
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatQC3P
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatQC3
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatQC2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPQC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPE20
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPE11
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPDPPS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatPDFIX
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatNONE
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatFCP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsQCStatAFC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortC2ON
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortC1ON
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortA2ON
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortA1ON
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsInitialized
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsFullCharged
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsErrorinDischarging
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsErrorinCharging
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsDischarging
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsCharging
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextSet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextEnSet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IextDirSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Click
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_CapacityLoad
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtc3Data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_setTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_setDate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_gettime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_getdate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConvert
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[183]"></a>thread_echo</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, main.o(.text.thread_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thread_echo &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_getvalidnum
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufread
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[184]"></a>thread_key</STRONG> (Thumb, 1648 bytes, Stack size 24 bytes, main.o(.text.thread_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = thread_key &rArr; uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSw6306VInIbusRatio
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsOverHeated
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsBatteryDepleted
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramTest
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Key_Events
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[185]"></a>thread_lcdprintf</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, main.o(.text.thread_lcdprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thread_lcdprintf &rArr; OLED_Display &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; MySPI_SwapByte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[186]"></a>thread_trig</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, main.o(.text.thread_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = thread_trig &rArr; uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_StatusLoad
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Click
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[182]"></a>uprintf</STRONG> (Thumb, 44 bytes, Stack size 96 bytes, py32f0xx_bsp_usart.o(.text.uprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_trig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1a0]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c4]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d7]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramTest
</UL>

<P><STRONG><a name="[1c5]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1c6]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a2]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c7]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ce]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTempControl
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1Sw6306InputPowerSet
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1LEDSet
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1LCDbacSet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU1INTIbusRatioSet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1_2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElectricArc
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ds3231SetHome
</UL>

<P><STRONG><a name="[1c8]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1c9]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a3]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ca]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1cb]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1cc]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[19f]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
</UL>

<P><STRONG><a name="[48]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1a4]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1a5]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1a6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1a8]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1cd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ce]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1cf]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1ae]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[18f]"></a>fminf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fminf.o(i.fminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fminf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[21]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[18e]"></a>log</STRONG> (Thumb, 790 bytes, Stack size 80 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[100]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home1_2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[189]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[19a]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[18b]"></a>LL_LPM_EnableDeepSleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_LPM_EnableDeepSleep))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[18d]"></a>LL_LPM_EnableSleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_LPM_EnableSleep))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[18a]"></a>LL_SYSTICK_DisableIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_SYSTICK_DisableIT))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[18c]"></a>LL_SYSTICK_EnableIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_SYSTICK_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[188]"></a>LL_TIM_OC_SetCompareCH2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_TIM_OC_SetCompareCH2))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[112]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, debounce_key.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
</UL>

<P><STRONG><a name="[116]"></a>LL_EXTI_DisableEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_DisableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[11a]"></a>LL_EXTI_DisableFallingTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_DisableFallingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[118]"></a>LL_EXTI_DisableIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_DisableIT))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[11c]"></a>LL_EXTI_DisableRisingTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_DisableRisingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[119]"></a>LL_EXTI_EnableEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[11d]"></a>LL_EXTI_EnableFallingTrig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_EnableFallingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[117]"></a>LL_EXTI_EnableIT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[11b]"></a>LL_EXTI_EnableRisingTrig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_EnableRisingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[122]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[11e]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[11f]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[123]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[121]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[120]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[129]"></a>LL_I2C_AcknowledgeNextData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_AcknowledgeNextData))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[124]"></a>LL_I2C_ConfigSpeed</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_ConfigSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[125]"></a>LL_I2C_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[128]"></a>LL_I2C_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[127]"></a>LL_I2C_SetOwnAddress1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_SetOwnAddress1))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[14d]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[14e]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[150]"></a>LL_RCC_GetHSIDiv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetHSIDiv))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[14f]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[153]"></a>LL_RCC_HSI_GetFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_HSI_GetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[152]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[130]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[140]"></a>LL_TIM_OC_SetCompareCH1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH1))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>

<P><STRONG><a name="[141]"></a>LL_TIM_OC_SetCompareCH2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH2))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
</UL>

<P><STRONG><a name="[142]"></a>LL_TIM_OC_SetCompareCH3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH3))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
</UL>

<P><STRONG><a name="[143]"></a>LL_TIM_OC_SetCompareCH4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH4))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
</UL>

<P><STRONG><a name="[12d]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[12e]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[12f]"></a>LL_TIM_SetRepetitionCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_SetRepetitionCounter))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[133]"></a>OC1Config</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, py32f0xx_ll_tim.o(.text.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OC1Config
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[131]"></a>OC2Config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, py32f0xx_ll_tim.o(.text.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OC2Config
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[134]"></a>OC3Config</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, py32f0xx_ll_tim.o(.text.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OC3Config
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[132]"></a>OC4Config</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, py32f0xx_ll_tim.o(.text.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[d1]"></a>LL_EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f0xx_bsp_exti.o(.text.LL_EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>LL_EXTI_IsActiveFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_exti.o(.text.LL_EXTI_IsActiveFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>LL_EXTI_SetEXTISource</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, py32f0xx_bsp_exti.o(.text.LL_EXTI_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>

<P><STRONG><a name="[7f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_exti.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>

<P><STRONG><a name="[7e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, py32f0xx_bsp_exti.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>

<P><STRONG><a name="[4d]"></a>APP_AdcCalibrate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f0xx_bsp_gpio.o(.text.APP_AdcCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_AdcCalibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_StartCalibration
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsCalibrationOnGoing
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[79]"></a>LL_ADC_ClearFlag_EOC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_ClearFlag_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConvert
</UL>

<P><STRONG><a name="[76]"></a>LL_ADC_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConvert
</UL>

<P><STRONG><a name="[78]"></a>LL_ADC_IsActiveFlag_EOC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_IsActiveFlag_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConvert
</UL>

<P><STRONG><a name="[50]"></a>LL_ADC_IsCalibrationOnGoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_IsCalibrationOnGoing))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
</UL>

<P><STRONG><a name="[4e]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
</UL>

<P><STRONG><a name="[7a]"></a>LL_ADC_REG_ReadConversionData12</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_REG_ReadConversionData12))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConvert
</UL>

<P><STRONG><a name="[73]"></a>LL_ADC_REG_SetContinuousMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_REG_SetContinuousMode))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[70]"></a>LL_ADC_REG_SetDMATransfer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_REG_SetDMATransfer))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[71]"></a>LL_ADC_REG_SetOverrun</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_REG_SetOverrun))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[75]"></a>LL_ADC_REG_SetSequencerChannels</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_REG_SetSequencerChannels))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConvert
</UL>

<P><STRONG><a name="[72]"></a>LL_ADC_REG_SetSequencerDiscont</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_REG_SetSequencerDiscont))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[6f]"></a>LL_ADC_REG_SetTriggerSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_REG_SetTriggerSource))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[77]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_REG_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConvert
</UL>

<P><STRONG><a name="[65]"></a>LL_ADC_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_ReleaseReset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[6a]"></a>LL_ADC_SetClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_SetClock))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[69]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[6c]"></a>LL_ADC_SetDataAlignment</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_SetDataAlignment))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[6d]"></a>LL_ADC_SetLowPowerMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_SetLowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[6b]"></a>LL_ADC_SetResolution</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_SetResolution))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[6e]"></a>LL_ADC_SetSamplingTimeCommonChannels</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_SetSamplingTimeCommonChannels))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[4f]"></a>LL_ADC_StartCalibration</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
</UL>

<P><STRONG><a name="[66]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, py32f0xx_bsp_gpio.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[114]"></a>LL_APB1_GRP2_ForceReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_APB1_GRP2_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Reset
</UL>

<P><STRONG><a name="[115]"></a>LL_APB1_GRP2_ReleaseReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_APB1_GRP2_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Reset
</UL>

<P><STRONG><a name="[82]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Config
</UL>

<P><STRONG><a name="[68]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
</UL>

<P><STRONG><a name="[67]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, py32f0xx_bsp_gpio.o(.text.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AdcConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Config
</UL>

<P><STRONG><a name="[85]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, py32f0xx_bsp_i2c.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[86]"></a>LL_APB1_GRP1_ForceReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_APB1_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[87]"></a>LL_APB1_GRP1_ReleaseReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_APB1_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[110]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
</UL>

<P><STRONG><a name="[10e]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
</UL>

<P><STRONG><a name="[10f]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
</UL>

<P><STRONG><a name="[54]"></a>LL_I2C_AcknowledgeNextData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_AcknowledgeNextData))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[59]"></a>LL_I2C_ClearFlag_ADDR</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_ClearFlag_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[10a]"></a>LL_I2C_ClearFlag_AF</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_ClearFlag_AF))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>LL_I2C_ClearFlag_BERR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_ClearFlag_BERR))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>LL_I2C_DisableBitPOS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableBitPOS))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[8e]"></a>LL_I2C_DisableIT_BUF</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableIT_BUF))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>LL_I2C_DisableIT_EVT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableIT_EVT))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>LL_I2C_DisableIT_RX</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableIT_RX))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>LL_I2C_DisableIT_TX</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableIT_TX))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>LL_I2C_DisableReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableReset))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[5b]"></a>LL_I2C_EnableBitPOS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableBitPOS))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[8d]"></a>LL_I2C_EnableIT_ERR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableIT_ERR))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[108]"></a>LL_I2C_EnableIT_RX</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableIT_RX))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>LL_I2C_EnableIT_TX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableIT_TX))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>

<P><STRONG><a name="[88]"></a>LL_I2C_EnableReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableReset))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Diagnosis
</UL>

<P><STRONG><a name="[55]"></a>LL_I2C_GenerateStartCondition</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_GenerateStartCondition))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[5a]"></a>LL_I2C_GenerateStopCondition</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_GenerateStopCondition))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[58]"></a>LL_I2C_IsActiveFlag_ADDR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_ADDR))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[109]"></a>LL_I2C_IsActiveFlag_AF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_AF))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>LL_I2C_IsActiveFlag_BERR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_BERR))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>LL_I2C_IsActiveFlag_BTF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[52]"></a>LL_I2C_IsActiveFlag_BUSY</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_BUSY))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[5e]"></a>LL_I2C_IsActiveFlag_RXNE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[56]"></a>LL_I2C_IsActiveFlag_SB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_SB))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[60]"></a>LL_I2C_IsActiveFlag_TXE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
</UL>

<P><STRONG><a name="[5c]"></a>LL_I2C_ReceiveData8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[57]"></a>LL_I2C_TransmitData8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_TransmitData8))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Transmit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_I2C_Receive
</UL>

<P><STRONG><a name="[8c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[8b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[95]"></a>LL_LPM_DisableEventOnPend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_LPM_DisableEventOnPend))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[98]"></a>LL_LPM_DisableSleepOnExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_LPM_DisableSleepOnExit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[99]"></a>LL_LPM_EnableSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_LPM_EnableSleep))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[97]"></a>LL_PWR_EnableLowPowerRunMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_PWR_EnableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[96]"></a>LL_PWR_SetRegulVoltageScaling</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_PWR_SetRegulVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[9c]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, py32f0xx_bsp_rcc.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[9b]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, py32f0xx_bsp_rcc.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a6]"></a>LL_FLASH_SetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a4]"></a>LL_InitTick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a2]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a9]"></a>LL_RCC_HSE_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_HSE_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[9d]"></a>LL_RCC_HSI_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[9f]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[9e]"></a>LL_RCC_HSI_SetCalibFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_HSI_SetCalibFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a8]"></a>LL_RCC_LSE_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_LSE_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[aa]"></a>LL_RCC_LSI_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_LSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a0]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a3]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a1]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[a5]"></a>LL_SYSTICK_EnableIT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_SYSTICK_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[ac]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, py32f0xx_bsp_tim.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
</UL>

<P><STRONG><a name="[92]"></a>LL_TIM_EnableAllOutputs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_tim.o(.text.LL_TIM_EnableAllOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMChannelConfig
</UL>

<P><STRONG><a name="[93]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, py32f0xx_bsp_tim.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMChannelConfig
</UL>

<P><STRONG><a name="[af]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[bc]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[b9]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[bb]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[ba]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[b8]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[177]"></a>LL_USART_ClearFlag_FE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_FE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_FE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>LL_USART_ClearFlag_NE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_NE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_NE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>LL_USART_ClearFlag_ORE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_ORE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_ORE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>LL_USART_ClearFlag_PE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_PE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_PE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>LL_USART_ClearFlag_TC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_TC))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[170]"></a>LL_USART_DisableIT_TXE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_DisableIT_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>LL_USART_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[be]"></a>LL_USART_EnableIT_ERROR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_EnableIT_ERROR))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[bd]"></a>LL_USART_EnableIT_PE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_EnableIT_PE))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[bf]"></a>LL_USART_EnableIT_RXNE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_EnableIT_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[17f]"></a>LL_USART_EnableIT_TXE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_EnableIT_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
</UL>

<P><STRONG><a name="[176]"></a>LL_USART_IsActiveFlag_FE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_FE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>LL_USART_IsActiveFlag_NE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_NE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>LL_USART_IsActiveFlag_ORE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_ORE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>LL_USART_IsActiveFlag_PE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_PE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>LL_USART_IsActiveFlag_RXNE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IsBusy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>LL_USART_IsActiveFlag_TXE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>LL_USART_IsEnabledIT_TXE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsEnabledIT_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IsBusy
</UL>

<P><STRONG><a name="[173]"></a>LL_USART_ReceiveData8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_USART_SetBaudRate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[b1]"></a>LL_USART_SetDataWidth</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetDataWidth))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[b4]"></a>LL_USART_SetHWFlowCtrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetHWFlowCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[b3]"></a>LL_USART_SetParity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetParity))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[b2]"></a>LL_USART_SetStopBitsLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetStopBitsLength))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[b5]"></a>LL_USART_SetTransferDirection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetTransferDirection))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[171]"></a>LL_USART_TransmitData8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_TransmitData8))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[c0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[136]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, 12864oled_drv.o(.text.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdGpioDisable
</UL>

<P><STRONG><a name="[13f]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, myspi_drv.o(.text.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySpiGpioInit
</UL>

<P><STRONG><a name="[e0]"></a>FLASH_MassErase</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(.text.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[e2]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(.text.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[e3]"></a>FLASH_Program_Page</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, py32f0xx_hal_flash.o(.text.FLASH_Program_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_Program_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[e1]"></a>FLASH_SectorErase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(.text.FLASH_SectorErase))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[d2]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, py32f0xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[1a9]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a1]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1ac]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ab]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
